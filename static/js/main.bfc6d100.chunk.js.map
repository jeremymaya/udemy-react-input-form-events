{"version":3,"sources":["env.js","api/unsplash.js","components/SearchBar.js","components/ImageCard.js","components/ImageList.js","components/App.js","index.js"],"names":["dotenv","config","silent","axios","create","baseURL","headers","Authorization","process","SearchBar","state","term","onFormSubmit","e","preventDefault","props","onSubmit","className","type","value","this","onChange","setState","target","React","Component","ImageCard","setSpans","height","imageRef","current","clientHeight","spans","Math","ceil","createRef","addEventListener","image","description","urls","style","gridRowEnd","src","regular","alt","ref","ImageList","images","map","id","App","onSearchSubmit","a","unsplash","get","params","query","response","data","results","marginTop","ReactDOM","render","document","querySelector"],"mappings":"wOAEAA,EAAOC,OAAO,CAAEC,QAAQ,I,YCATC,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,2BACTC,QAAS,CACLC,cAAc,aAAD,OAAeC,kDCiCrBC,E,4MA5BXC,MAAQ,CAAEC,KAAM,I,EAEhBC,aAAe,SAAAC,GACXA,EAAEC,iBAEF,EAAKC,MAAMC,SAAS,EAAKN,MAAMC,O,uDAGzB,IAAD,OACL,OACI,qBAAKM,UAAU,aAAf,SACI,sBAAMD,SAAU,SAAAH,GAAC,OAAI,EAAKD,aAAaC,IAAII,UAAU,UAArD,SACI,sBAAKA,UAAU,QAAf,UACI,iDAGA,uBACIC,KAAK,OACLC,MAAOC,KAAKV,MAAMC,KAClBU,SAAU,SAAAR,GAAC,OAAI,EAAKS,SAAS,CAAEX,KAAME,EAAEU,OAAOJ,sB,GA3BlDK,IAAMC,WCsCfC,G,wDArCX,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IAcVY,SAAW,WACP,IAAMC,EAAS,EAAKC,SAASC,QAAQC,aAE/BC,EAAQC,KAAKC,KAAKN,EAAS,GAAK,GAEtC,EAAKN,SAAS,CAAEU,WAjBhB,EAAKtB,MAAQ,CAAEsB,MAAO,GAEtB,EAAKH,SAAWL,IAAMW,YALP,E,gEAYff,KAAKS,SAASC,QAAQM,iBAAiB,OAAQhB,KAAKO,Y,+BAW/C,MAEyBP,KAAKL,MAAMsB,MAAjCC,EAFH,EAEGA,YAAaC,EAFhB,EAEgBA,KAIrB,OACI,qBAAKC,MAAQ,CAAEC,WAAW,QAAD,OAAUrB,KAAKV,MAAMsB,QAA9C,SACI,qBAAKU,IAAKH,EAAKI,QAASC,IAAKN,EAAaO,IAAKzB,KAAKS,iB,GAhC5CL,IAAMC,YCefqB,EAbG,SAAA/B,GAMd,IAAMgC,EAAShC,EAAMgC,OAAOC,KAAI,SAACX,GAC7B,OAAO,cAAC,EAAD,CAA0BA,MAAOA,GAAjBA,EAAMY,OAGjC,OAAO,qBAAKhC,UAAU,aAAf,SAA6B8B,KCiBzBG,E,4MAtBXxC,MAAQ,CAAEqC,OAAQ,I,EAIlBI,e,uCAAiB,WAAOxC,GAAP,eAAAyC,EAAA,sEACUC,EAASC,IAAI,iBAAkB,CAClDC,OAAQ,CAAEC,MAAO7C,KAFR,OACP8C,EADO,OAKb,EAAKnC,SAAS,CAAEyB,OAAQU,EAASC,KAAKC,UALzB,2C,6GASb,OACI,sBAAK1C,UAAU,eAAeuB,MAAO,CAAEoB,UAAW,QAAlD,UACI,cAAC,EAAD,CAAW5C,SAAUI,KAAK+B,iBAC1B,cAAC,EAAD,CAAWJ,OAAQ3B,KAAKV,MAAMqC,gB,GAnB5BvB,IAAMC,WCFxBoC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.bfc6d100.chunk.js","sourcesContent":["import dotenv from 'dotenv';\n\ndotenv.config({ silent: true })\n","import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'https://api.unsplash.com',\n    headers: {\n        Authorization: `Client-ID ${process.env.REACT_APP_UNSPLASH_ACCESS_KEY}`\n    }\n\n})","import React from 'react';\n\nclass SearchBar extends React.Component {\n    // // event object is being passed\n    // // pay attention to the naming convention\n    // // other naming convention is handleInputChange\n    // onInputChange(event) {\n    //     console.log(event.target.value);\n    // }\n\n    state = { term: '' };\n\n    onFormSubmit = e => {\n        e.preventDefault();\n\n        this.props.onSubmit(this.state.term);\n    }\n\n    render() {\n        return (\n            <div className=\"ui segment\">\n                <form onSubmit={e => this.onFormSubmit(e)} className=\"ui form\">\n                    <div className=\"field\">\n                        <label>Image Search</label>\n                        {/* notice onInputChange is not invoked - the callback function is waiting till there is a change */}\n                        {/* different events are paired with different properties - onChange is a property that detects a event when input text is changed */}\n                        <input\n                            type=\"text\"\n                            value={this.state.term}\n                            onChange={e => this.setState({ term: e.target.value })}\n                        />\n                    </div>\n                </form>\n            </div>\n        );\n    };\n}\n\nexport default SearchBar;","import React from 'react';\n\nclass ImageCard extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { spans: 0 };\n\n        this.imageRef = React.createRef();\n    }\n\n    // accesses the imgage ref\n    componentDidMount() {\n        // waits for an image to load \n        // and paired up with a callback setSpans\n        this.imageRef.current.addEventListener('load', this.setSpans);\n    }\n\n    setSpans = () => {\n        const height = this.imageRef.current.clientHeight;\n\n        const spans = Math.ceil(height / 10 + 1);\n\n        this.setState({ spans });\n    };\n\n    render() {\n        // destructuring this.props.image\n        const { description, urls } = this.props.image;\n\n        // <img> tag here is a JSX tag which will eventually become a JS element\n        // ref will contain the image node information\n        return (\n            <div style= {{ gridRowEnd: `span ${this.state.spans}` }}>\n                <img src={urls.regular} alt={description} ref={this.imageRef} />\n            </div>\n        )\n    }\n}\n\nexport default ImageCard;","import './ImageList.css';\nimport React from 'react';\nimport ImageCard from './ImageCard';\n\nconst ImageList = props => {\n    // const images = props.images.map((image) => {\n    //     // assign the key to the root element - for this use case, it is <img> tag\n    //     return <img key={image.id} alt={image.alt_description} src={image.urls.regular} />\n\n    // destructure the above codeblock for readability\n    const images = props.images.map((image) => {\n        return <ImageCard key={image.id} image={image} />\n    });\n    \n    return <div className=\"image-list\">{images}</div>;\n};\n\nexport default ImageList;","import '../env';\nimport React from 'react';\nimport unsplash from '../api/unsplash';\nimport SearchBar from './SearchBar';\nimport ImageList from './ImageList';\n\nclass App extends React.Component {\n    // initializes a state\n    // defaults to an empty array as we are expecting an array of JSON objects\n    state = { images: [] };\n\n    // callback function\n    // converted into an arrow function to bind the callback\n    onSearchSubmit = async (term) => {\n        const response = await unsplash.get('/search/photos', {\n            params: { query: term }\n        });\n\n        this.setState({ images: response.data.results });\n    }\n\n    render() {\n        return (\n            <div className=\"ui container\" style={{ marginTop: '10px' }}>\n                <SearchBar onSubmit={this.onSearchSubmit} />\n                <ImageList images={this.state.images} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.querySelector('#root'))"],"sourceRoot":""}